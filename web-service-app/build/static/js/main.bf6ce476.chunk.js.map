{"version":3,"sources":["components/records.jsx","components/addRecord.jsx","components/navbar.jsx","components/paginatedlist.jsx","components/forminput.jsx","components/loginform.jsx","App.js","serviceWorker.js","index.js"],"names":["Records","state","records","axios","get","then","response","data","_this2","setState","catch","err","console","log","react_default","a","createElement","Fragment","className","scope","this","slice","map","record","key","id","name","age","address","Component","AddRecord","handleSubmitForm","event","preventDefault","post","_this","res","message","handleChangeInput","currentTarget","value","onSubmit","for","type","placeholder","onChange","NavBar","react_router_dom","to","strict","activeClassName","PaginatedList","currentPage","itemsPerPage","pages","showPages","paginatedClick","Math","max","_this3","_this$state","idxOfLastRec","idxOfFirstRec","currentRecords","i","ceil","length","push","onClick","n","parseInt","FormInput","htmlFor","props","label","handleChange","error","LoginForm","account","username","password","errors","disable","schema","Joi","string","required","validate","input","results","abortEarly","details","context","Object","entries","handleSubmit","forminput","disabled","App","navbar","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf6ce476.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass Records extends Component {\n    state = {\n        records: []\n    };\n\n    async componentDidMount() {\n        //URL\n        const getURL = \"https://prashantranjan.com/api/services.php\";\n        await axios\n            .get(getURL)\n            .then(response => {\n                const records = response.data;\n                this.setState({ records });\n            })\n            .catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <h1>Fetching Records</h1>\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">id</th>\n                                <th scope=\"col\">name</th>\n                                <th scope=\"col\">age</th>\n                                <th scope=\"col\">address</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.records.slice(-100, -50).map(record => (\n                                <tr key={record.id}>\n                                    <th>{record.id}</th>\n                                    <td>{record.name}</td>\n                                    <td>{record.age}</td>\n                                    <td>{record.address}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Records;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nclass AddRecord extends Component {\n    state = {\n        record: { name: \"\", age: \"\", address: \"\" }\n    };\n\n    handleSubmitForm = event => {\n        event.preventDefault();\n        const postUrl = \"https://prashantranjan.com/api/add-data.php\";\n        axios\n            .post(postUrl, this.state.record)\n            .then(res => console.log(\"Submitted!\", res.data.message))\n            .catch(err => console.log(\"Error Occured\", err));\n    };\n\n    handleChangeInput = event => {\n        // console.log(\"change in submission\", event.currentTarget.id);\n        let { record } = this.state;\n        record[event.currentTarget.id] = event.currentTarget.value;\n\n        // console.log(record);\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <h1>Add Record</h1>\n                <form onSubmit={this.handleSubmitForm}>\n                    <div className=\"form-group\">\n                        <label for=\"name\">Name</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"name\"\n                            placeholder=\"Enter Name\"\n                            onChange={this.handleChangeInput}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"age\">Age</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"age\"\n                            placeholder=\"Age\"\n                            onChange={this.handleChangeInput}\n                        />\n                    </div>\n                    <div className=\"form-group\">\n                        <label for=\"address\">Address</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"address\"\n                            placeholder=\"Address\"\n                            onChange={this.handleChangeInput}\n                        />\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\">\n                        Submit\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default AddRecord;\n","import React, { Component } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nclass NavBar extends Component {\n    state = {};\n    render() {\n        return (\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <Link className=\"navbar-brand\" to=\"/\">\n                    Web Service App\n                </Link>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav nav-fill nav-pills\">\n                        <li className=\"nav-item\">\n                            <NavLink\n                                strict\n                                activeClassName=\"active\"\n                                className=\"nav-link\"\n                                to=\"/records\"\n                            >\n                                Records\n                            </NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink\n                                strict\n                                activeClassName=\"active\"\n                                className=\"nav-link\"\n                                to=\"/paginated\"\n                            >\n                                Paginated\n                            </NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink\n                                strict\n                                activeClassName=\"active\"\n                                className=\"nav-link\"\n                                to=\"/addrecord\"\n                            >\n                                Add-Record\n                            </NavLink>\n                        </li>\n                        <li className=\"nav-item\">\n                            <NavLink\n                                strict\n                                activeClassName=\"active\"\n                                className=\"nav-link\"\n                                to=\"/login\"\n                            >\n                                Login\n                            </NavLink>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nclass PaginatedList extends Component {\n    state = {\n        records: [],\n        currentPage: 1,\n        itemsPerPage: 50,\n        pages: [],\n        showPages: []\n    };\n\n    async componentDidMount() {\n        //URL\n        const getURL = \"https://prashantranjan.com/api/services.php\";\n        await axios\n            .get(getURL)\n            .then(response => {\n                const records = response.data;\n                this.setState({ records });\n            })\n            .catch(err => console.log(err));\n    }\n\n    paginatedClick = event => {\n        let { currentPage } = this.state;\n        if (event.currentTarget.id === \"next\") currentPage++;\n        else if (event.currentTarget.id === \"prev\")\n            currentPage = Math.max(1, currentPage - 1);\n        else currentPage = event.currentTarget.id;\n        this.setState({\n            currentPage\n        });\n    };\n    render() {\n        const { records, currentPage, itemsPerPage } = this.state;\n        const idxOfLastRec = currentPage * itemsPerPage;\n        const idxOfFirstRec = idxOfLastRec - itemsPerPage;\n        const currentRecords = records.slice(idxOfFirstRec, idxOfLastRec);\n        let pages = [];\n        for (let i = 1; i < Math.ceil(records.length / itemsPerPage); i++) {\n            pages.push(i);\n        }\n        //this.state.showPages = pages.slice(0, 4);\n        const next = \">>\";\n        const prev = \"<<\";\n        return (\n            <React.Fragment>\n                <h1>Fetching Records</h1>\n                <div className=\"container\">\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">id</th>\n                                <th scope=\"col\">name</th>\n                                <th scope=\"col\">age</th>\n                                <th scope=\"col\">address</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {currentRecords.map(record => (\n                                <tr key={record.id}>\n                                    <th>{record.id}</th>\n                                    <td>{record.name}</td>\n                                    <td>{record.age}</td>\n                                    <td>{record.address}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                    <ul id=\"page-numbers\" className=\"pagination\">\n                        <li id=\"prev\" className=\"page-item\">\n                            {\" \"}\n                            <Link\n                                className=\"page-link\"\n                                onClick={this.paginatedClick}\n                                to=\"#\"\n                                id=\"prev\"\n                            >\n                                {prev}\n                            </Link>\n                        </li>\n                        {pages.map(n => (\n                            <li\n                                key={n}\n                                className={\n                                    n === parseInt(this.state.currentPage)\n                                        ? \"page-item active\"\n                                        : \"page-item\"\n                                }\n                            >\n                                <Link\n                                    className=\"page-link\"\n                                    onClick={this.paginatedClick}\n                                    id={n}\n                                    to=\"#\"\n                                >\n                                    {n}\n                                </Link>\n                            </li>\n                        ))}\n                        <li id=\"prev\" className=\"page-item\">\n                            {\" \"}\n                            <Link\n                                className=\"page-link\"\n                                onClick={this.paginatedClick}\n                                to=\"#\"\n                                id=\"next\"\n                            >\n                                {next}\n                            </Link>\n                        </li>\n                    </ul>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PaginatedList;\n","import React, { Component } from \"react\";\n\nclass FormInput extends Component {\n    render() {\n        return (\n            <div className=\"form-group\">\n                <label htmlFor={this.props.id}>{this.props.label}</label>\n                <input\n                    className=\"form-control col-3\"\n                    value={this.props.value}\n                    type={this.props.type}\n                    name={this.props.id}\n                    id={this.props.id}\n                    onChange={this.props.handleChange}\n                />\n                {this.props.error && (\n                    <div className=\"alert alert-danger col-3\">\n                        {this.props.error}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default FormInput;\n","import React, { Component } from \"react\";\nimport FormInput from \"./forminput\";\nimport Joi from \"@hapi/joi\";\n\nclass LoginForm extends Component {\n    state = {\n        account: {\n            username: \"\",\n            password: \"\"\n        },\n        errors: {},\n        disable: true // For submit button\n    };\n\n    schema = {\n        username: Joi.string().required(),\n        password: Joi.string().required()\n    };\n\n    validate = input => {\n        let { account, errors, disable } = this.state;\n        //Normal Validation Method\n        /* if (account.username.trim() === \"\")\n            errors.username = \"Username Required\";\n        else delete errors.username;\n\n        if (account.password.trim() === \"\")\n            errors.password = \"Password Required\";\n        else delete errors.password; */\n\n        //Joi validation\n        const results = Joi.validate(this.state.account, this.schema, {\n            abortEarly: false\n        });\n\n        if (results.error) {\n            //console.log(results.error.details, input.id);\n            results.error.details.map(\n                err => (errors[err.context.key] = err.message)\n            );\n            disable = true;\n        } else {\n            delete errors[input.id];\n            if (Object.entries(errors).length === 0) disable = false;\n        }\n\n        this.setState({\n            errors,\n            disable\n        });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        console.log(this.state.account);\n\n        //Validating\n        this.validate(event.currentTarget);\n    };\n\n    handleChange = event => {\n        let { account } = this.state;\n        account[event.currentTarget.id] = event.currentTarget.value;\n        this.setState({\n            account\n        });\n        this.validate(event.currentTarget);\n    };\n\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <h1>Login</h1>\n                <form onSubmit={this.handleSubmit}>\n                    <FormInput\n                        key=\"username\"\n                        id=\"username\"\n                        label=\"Username\"\n                        type=\"text\"\n                        value={this.state.account.username}\n                        handleChange={this.handleChange}\n                        error={this.state.errors.username}\n                    />\n                    <FormInput\n                        key=\"password\"\n                        id=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        value={this.state.account.password}\n                        handleChange={this.handleChange}\n                        error={this.state.errors.password}\n                    />\n                    <button\n                        type=\"submit\"\n                        className=\"btn btn-primary\"\n                        disabled={this.state.disable}\n                    >\n                        Submit\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default LoginForm;\n","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Records from \"./components/records\";\nimport AddRecord from \"./components/addRecord\";\nimport NavBar from \"./components/navbar\";\nimport PaginatedList from \"./components/paginatedlist\";\nimport LoginForm from \"./components/loginform\";\n\nclass App extends Component {\n    state = {};\n    render() {\n        return (\n            <div className=\"container-fluid\">\n                <NavBar />\n                {/* Register routes for Application Components */}\n                <Switch>\n                    <Route path=\"/records\" component={Records} />\n                    <Route path=\"/addrecord\" component={AddRecord} />\n                    <Route path=\"/paginated\" component={PaginatedList} />\n                    <Route path=\"/login\" component={LoginForm} />\n                    <Route path=\"/\" component={Records} />\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//My imports\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { BrowserRouter as Browser } from \"react-router-dom\";\n\nReactDOM.render(\n    <Browser>\n        <App />\n    </Browser>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}